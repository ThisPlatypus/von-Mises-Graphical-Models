}
#perchè voglio il min della - log-like
-f(k,n,x)
}
k128 <- optim(99, frn,  X=Phi2[,9], method = "L-BFGS-B", hessian = T,lower = 0, upper = 100 )
#stima k1
k128$par
#stima SE(k1)
k128$hessian^(-1)
##stima  f(phi_2 | phi_1)####
frn1 <- function(parms, X){
k2=parms[1]
l=parms[2]
x=X[,8]
y=X[,9]
# a=sqrt(k2^2+sum(l12^2*sin(x))^2)
f<-function(parms,x,y){
-50*log(2*pi)+sum( - log(besselI(  sqrt( parms[1]^2+parms[2]^2*sin(x)^2 ) ,0) ) + parms[1]*cos(y)+parms[2]*sin(x)*sin(y)  )
}
#perchè voglio il min della - log-like
-f(c(k2,l),x,y)
}
k127 <- optim(c(4,0), frn1,  X=Phi2,
method="L-BFGS-B", hessian = 1,
lower = c(0, -Inf),
upper = c(Inf, Inf))
k127$par
####per le altre colonne
par=c(rep(1,9-j))
n=length(Phi2[,1])
Phi2=as.matrix(Phi2)
Phi2=circular(Phi2, units = "radians")
loglike<- function(par, Phi2, j, quali =(j+1):9 ){
kj=par[1]
lambda=par[-1]
cmu=atan((kj)^(-1)*(lambda%*%t(sin(Phi2[,quali]) )))
ckappa=sqrt( kj^2+ (  lambda%*%t(sin(Phi2[,quali]) ) )^2  )
cmu=apply(cmu, 1, circular)
llike=0
for (i  in 1:n) {
llike=llike+dvonmises(Phi2[i,j], cmu[i], ckappa[i], log=T)
}
return(-llike)
}
Stime2=NULL
#fatti da 126 a 120
for (p in 7:1) {
k.l<- optim(c(rep(0.2,9-p+1)), loglike, Phi2=Phi2, j=p, hessian = T)
Stime2[[p]] <- list( StimePar=k.l$par, DiagHess=diag(solve(k.l$hessian) ), logL=k.l$value )
}
#
save(Stime2, file="fname2.RData")
#
load(fname2.RData)
#test####
####Test sui parametri####
#sistemo Stime
Stime2[[9]]=list( StimePar=k128$par, DiagHess=diag(solve(k128$hessian) ), logL=k128$value )
Stime2[[8]]=list( StimePar=k127$par, DiagHess=diag(solve(k127$hessian) ), logL=k127$value )
#calcolo le statistiche test
#la mia hessiana è negativa, dalla 51
Stat2=NULL
for (p in 1:9) {
Stat2[[p]]=list(Stime2[[p]]$StimePar/(sqrt(Stime2[[p]]$DiagHess)))
}
Stat2
#scelgo alpha
alpha=qnorm(0.05,mean = 0,1)
alpha
#alpha=qnorm(0.025,mean = 0,1)
#creo il vettore che mi dice quali devo prendere
flag2=NULL
#faccio il confronto
for (p in 1:9) {
flag2[[p]]=list(!c(alpha<= Stat2[[p]][[1]] & Stat2[[p]][[1]] <=-alpha)  )
}
#True=rifiuto h0
head(flag2)
for (p in 1:9) {
flag2[[p]][[1]][1]=TRUE
}
###LR TEST#####
#Log-likelihood modello intero
Ls=0
for (p in 1:9) {
Ls=Ls+Stime2[[p]]$logL
}
Ls=-Ls
Ls
#modello 2
L2=0
for (p in 1:9) {
b=array(Stime2[[p]]$StimePar)
C=c(array(flag2[[p]]))[[1]]
a=c(c(array(flag2[[p]]))[[1]], rep(FALSE, p-1))
if(sum(a[-1])==0){
k=b[1]
L2=L2+-50*log(2*pi)+ sum(-log( besselI(k,0) )+ k*cos(Phi2[,p]))
}else if ( sum(a[-1])!=0  ){
cmu=atan((b[1])^(-1)*(b[C]%*%t(sin(Phi2[,a]) )))
ckappa=sqrt( b[1]^2+ (  b[C]%*%t(sin(Phi2[,a]) ) )^2  )
cmu=apply(cmu, 1, circular)
llike=0
for (i  in 1:n) {
llike=llike+dvonmises(Phi2[i,p], cmu[i], ckappa[i], log=T)
}
L2=L2+llike
}
}
L2
#LR test#####
L=-2*(L2-Ls)
L
#p-value=0
#H_1 : il modello più grande è meglio
#H_0 : il modello più semplice è il migliore
#chi^2_{50- 29=21}
sum(rapply(flag2, function(x) sum(!x)))
sum(rapply(flag2, function(x) sum(x)))
#L2 ha 7 parametri
#Ls ha 7+38=45 parametri
p.value=(dchisq(L, 33, ncp = 0, log = FALSE))
round(p.value,2)
# quindi rifiuto H0, ovvero prendo il modello saturo
#AIC /BIC TEST
AIC_Ls=2*45-2*(Ls)
45*log(50)-2*Ls
AIC_Ls
AIC_L2=2*12-2*(L2)
12*log(50)-2*L2
AIC_L2
#smaller is best!
#calcolo le statistiche test
#la mia hessiana è negativa, dalla 51
Stat2=NULL
for (p in 1:9) {
Stat2[[p]]=list(Stime2[[p]]$StimePar/(sqrt(Stime2[[p]]$DiagHess)))
prova[[p]]=list(dnorm(Stat2[[p]][[1]],0,1)  )
}
prova
#Log-likelihood modello intero
Ls=0
for (p in 1:9) {
Ls=Ls+Stime2[[p]]$logL
}
Ls=-Ls
Ls
#faccio il confronto
flagp=NULL
for (p in 1:9) {
flagp[[p]]=list(!c(0<= Stat[[p]][[1]] & Stat[[p]][[1]] <=-0) )
}
L2=0
for (p in 1:9) {
b=array(Stime2[[p]]$StimePar)
C=c(array(flagp[[p]]))[[1]]
a=c(c(array(flagp[[p]]))[[1]], rep(FALSE, p-1))
if(sum(a[-1])==0){
k=b[1]
L2=L2+-50*log(2*pi)+ sum(-log( besselI(k,0) )+ k*cos(Phi2[,p]))
}else if ( sum(a[-1])!=0  ){
cmu=atan((b[1])^(-1)*(b[C]%*%t(sin(Phi2[,a]) )))
ckappa=sqrt( b[1]^2+ (  b[C]%*%t(sin(Phi2[,a]) ) )^2  )
cmu=apply(cmu, 1, circular)
llike=0
for (i  in 1:n) {
llike=llike+dvonmises(Phi2[i,p], cmu[i], ckappa[i], log=T)
}
L2=L2+llike
}
}
L2
flagp=NULL
for (p in 1:9) {
flagp[[p]]=list(!c(0<= Stat2[[p]][[1]] & Stat2[[p]][[1]] <=-0) )
}
L2=0
for (p in 1:9) {
b=array(Stime2[[p]]$StimePar)
C=c(array(flagp[[p]]))[[1]]
a=c(c(array(flagp[[p]]))[[1]], rep(FALSE, p-1))
if(sum(a[-1])==0){
k=b[1]
L2=L2+-50*log(2*pi)+ sum(-log( besselI(k,0) )+ k*cos(Phi2[,p]))
}else if ( sum(a[-1])!=0  ){
cmu=atan((b[1])^(-1)*(b[C]%*%t(sin(Phi2[,a]) )))
ckappa=sqrt( b[1]^2+ (  b[C]%*%t(sin(Phi2[,a]) ) )^2  )
cmu=apply(cmu, 1, circular)
llike=0
for (i  in 1:n) {
llike=llike+dvonmises(Phi2[i,p], cmu[i], ckappa[i], log=T)
}
L2=L2+llike
}
}
L2
rapply(prova, max)
prova
flagp[[1]][[1]][2]=F
flagp[[2]][[1]][7]=F
flagp[[3]][[1]][6]=F
flagp[[4]][[1]][2]=F
flagp[[5]][[1]][5]=F
flagp[[6]][[1]][3]=F
flagp[[7]][[1]][3]=F
L2=0
for (p in 1:9) {
b=array(Stime2[[p]]$StimePar)
C=c(array(flagp[[p]]))[[1]]
a=c(c(array(flagp[[p]]))[[1]], rep(FALSE, p-1))
if(sum(a[-1])==0){
k=b[1]
L2=L2+-50*log(2*pi)+ sum(-log( besselI(k,0) )+ k*cos(Phi2[,p]))
}else if ( sum(a[-1])!=0  ){
cmu=atan((b[1])^(-1)*(b[C]%*%t(sin(Phi2[,a]) )))
ckappa=sqrt( b[1]^2+ (  b[C]%*%t(sin(Phi2[,a]) ) )^2  )
cmu=apply(cmu, 1, circular)
llike=0
for (i  in 1:n) {
llike=llike+dvonmises(Phi2[i,p], cmu[i], ckappa[i], log=T)
}
L2=L2+llike
}
}
L2
#LR test#####
L=-2*(L2+828.9088)
L
#p-value=0
#H_1 : il modello più grande è meglio
#H_0 : il modello più semplice è il migliore
#chi^2_{50- 29=21}
sum(rapply(flag2, function(x) sum(!x)))
sum(rapply(flag2, function(x) sum(x)))
#p-value=0
#H_1 : il modello più grande è meglio
#H_0 : il modello più semplice è il migliore
#chi^2_{50- 29=21}
sum(rapply(flagp, function(x) sum(!x)))
#L2 ha 7 parametri
#Ls ha 7+38=45 parametri
p.value=(dchisq(L, 7, ncp = 0, log = FALSE))
round(p.value,2)
flagp
flagp[[1]][[1]][5]=F
L2=0
for (p in 1:9) {
b=array(Stime2[[p]]$StimePar)
C=c(array(flagp[[p]]))[[1]]
a=c(c(array(flagp[[p]]))[[1]], rep(FALSE, p-1))
if(sum(a[-1])==0){
k=b[1]
L2=L2+-50*log(2*pi)+ sum(-log( besselI(k,0) )+ k*cos(Phi2[,p]))
}else if ( sum(a[-1])!=0  ){
cmu=atan((b[1])^(-1)*(b[C]%*%t(sin(Phi2[,a]) )))
ckappa=sqrt( b[1]^2+ (  b[C]%*%t(sin(Phi2[,a]) ) )^2  )
cmu=apply(cmu, 1, circular)
llike=0
for (i  in 1:n) {
llike=llike+dvonmises(Phi2[i,p], cmu[i], ckappa[i], log=T)
}
L2=L2+llike
}
}
L2
#LR test#####
L=-2*(L2+828.9088)
L
#p-value=0
#H_1 : il modello più grande è meglio
#H_0 : il modello più semplice è il migliore
#chi^2_{50- 29=21}
sum(rapply(flagp, function(x) sum(!x)))
sum(rapply(flag2, function(x) sum(x)))
#L2 ha 7 parametri
#Ls ha 7+38=45 parametri
p.value=(dchisq(L, 7, ncp = 0, log = FALSE))
round(p.value,2)
#L2 ha 7 parametri
#Ls ha 7+38=45 parametri
p.value=(dchisq(L, df=sum(rapply(flagp, function(x) sum(!x))), ncp = 0, log = FALSE))
round(p.value,2)
round(p.value,5)
#LR test#####
L=2*(L2+828.9088)
L
sum(rapply(flag2, function(x) sum(x)))
#L2 ha 7 parametri
#Ls ha 7+38=45 parametri
p.value=(dchisq(L, df=sum(rapply(flagp, function(x) sum(!x))), ncp = 0, log = FALSE))
round(p.value,5)
sum(rapply(flagp, function(x) sum(!x)))
flagp[[1]][[1]][5]=T
L2=0
for (p in 1:9) {
b=array(Stime2[[p]]$StimePar)
C=c(array(flagp[[p]]))[[1]]
a=c(c(array(flagp[[p]]))[[1]], rep(FALSE, p-1))
if(sum(a[-1])==0){
k=b[1]
L2=L2+-50*log(2*pi)+ sum(-log( besselI(k,0) )+ k*cos(Phi2[,p]))
}else if ( sum(a[-1])!=0  ){
cmu=atan((b[1])^(-1)*(b[C]%*%t(sin(Phi2[,a]) )))
ckappa=sqrt( b[1]^2+ (  b[C]%*%t(sin(Phi2[,a]) ) )^2  )
cmu=apply(cmu, 1, circular)
llike=0
for (i  in 1:n) {
llike=llike+dvonmises(Phi2[i,p], cmu[i], ckappa[i], log=T)
}
L2=L2+llike
}
}
L2
#LR test#####
L=2*(L2+828.9088)
L
sum(rapply(flag2, function(x) sum(x)))
#L2 ha 7 parametri
#Ls ha 7+38=45 parametri
p.value=(dchisq(L, df=sum(rapply(flagp, function(x) sum(!x))), ncp = 0, log = FALSE))
round(p.value,5)
flagpù
flagp
#LR test#####
L=-2*(L2+828.9088)
L
#L2 ha 7 parametri
#Ls ha 7+38=45 parametri
p.value=(dchisq(L, df=sum(rapply(flagp, function(x) sum(!x))), ncp = 0, log = FALSE))
round(p.value,5)
L2
#LR test#####
L=-2*(L2+800.9088)
L
sum(rapply(flag2, function(x) sum(x)))
#L2 ha 7 parametri
#Ls ha 7+38=45 parametri
p.value=(dchisq(L, df=sum(rapply(flagp, function(x) sum(!x))), ncp = 0, log = FALSE))
round(p.value,5)
#L2 ha 7 parametri
#Ls ha 7+38=45 parametri
p.value=(dchisq(-L, df=sum(rapply(flagp, function(x) sum(!x))), ncp = 0, log = FALSE))
round(p.value,5)
#LR test#####
L=-2*(L2+800.9088)
L
L2
#LR test#####
L=-2*(L2+828.9088)
L
#L2 ha 7 parametri
#Ls ha 7+38=45 parametri
p.value=(dchisq(-L, df=sum(rapply(flagp, function(x) sum(!x))), ncp = 0, log = FALSE))
round(p.value,5)
sum(rapply(flagp, function(x) sum(x)))*log(50)-2*L2
AIC_L2
AIC_Ls
#faccio il confronto
flagp=NULL
for (p in 1:9) {
flagp[[p]]=list(!c(0<= Stat[[p]][[1]] & Stat[[p]][[1]] <=-0) )
}
flagp[[3]][[1]][3]=F
flagp[[4]][[1]][2]=F
flagp[[5]][[1]][5]=F
flagp[[6]][[1]][2]=F
flagp[[7]][[1]][6]=F
flagp[[8]][[1]][3]=F
flagp[[9]][[1]][9]=F
L2=0
for (p in 1:9) {
b=array(Stime[[p]]$StimePar)
C=c(array(flagp[[p]]))[[1]]
a=c(c(array(flagp[[p]]))[[1]], rep(FALSE, 9-p))
if(sum(a[-1])==0){
k=b[1]
L2=L2+-50*log(2*pi)+ sum(-log( besselI(k,0) )+ k*cos(Phi2[,p]))
}else if ( sum(a[-1])!=0  ){
cmu=atan((b[1])^(-1)*(b[C]%*%t(sin(Phi2[,a]) )))
ckappa=sqrt( b[1]^2+ (  b[C]%*%t(sin(Phi2[,a]) ) )^2  )
cmu=apply(cmu, 1, circular)
llike=0
for (i  in 1:n) {
llike=llike+dvonmises(Phi2[i,p], cmu[i], ckappa[i], log=T)
}
L2=L2+llike
}
}
L2
#LR test#####
L=2*(L2+848.3081)
L
#p-value=0
#H_1 : il modello più grande è meglio
#H_0 : il modello più semplice è il migliore
#chi^2_{45- 6=39}
sum(rapply(flagp, function(x) sum(!x)))
sum(rapply(flagp, function(x) sum(x)))
#L2 ha 6 parametri
#Ls ha 45 parametri
p.value=(dchisq(L, df=sum(rapply(flagp, function(x) sum(!x))), ncp = 0, log = FALSE))
(p.value>0.0025)
sum(rapply(flagp, function(x) sum(x)))*log(50)-2*L2
AIC_L2=2*sum(rapply(flagp, function(x) sum(x)))-2*(L2)
AIC_L2
L2=0
for (p in 1:9) {
b=array(Stime2[[p]]$StimePar)
C=c(array(flagp[[p]]))[[1]]
a=c(c(array(flagp[[p]]))[[1]], rep(FALSE, p-1))
if(sum(a[-1])==0){
k=b[1]
L2=L2+-50*log(2*pi)+ sum(-log( besselI(k,0) )+ k*cos(Phi2[,p]))
}else if ( sum(a[-1])!=0  ){
cmu=atan((b[1])^(-1)*(b[C]%*%t(sin(Phi2[,a]) )))
ckappa=sqrt( b[1]^2+ (  b[C]%*%t(sin(Phi2[,a]) ) )^2  )
cmu=apply(cmu, 1, circular)
llike=0
for (i  in 1:n) {
llike=llike+dvonmises(Phi2[i,p], cmu[i], ckappa[i], log=T)
}
L2=L2+llike
}
}
L2
#LR test#####
L=-2*(L2+828.9088)
L
sum(rapply(flagp, function(x) sum(x)))
L2
flagp=NULL
for (p in 1:9) {
flagp[[p]]=list(!c(0<= Stat2[[p]][[1]] & Stat2[[p]][[1]] <=-0) )
}
flagp[[1]][[1]][2]=F
flagp[[1]][[1]][5]=T
flagp[[2]][[1]][7]=F
flagp[[3]][[1]][6]=F
flagp[[4]][[1]][2]=F
flagp[[5]][[1]][5]=F
flagp[[6]][[1]][3]=F
flagp[[7]][[1]][3]=F
L2=0
for (p in 1:9) {
b=array(Stime2[[p]]$StimePar)
C=c(array(flagp[[p]]))[[1]]
a=c(c(array(flagp[[p]]))[[1]], rep(FALSE, p-1))
if(sum(a[-1])==0){
k=b[1]
L2=L2+-50*log(2*pi)+ sum(-log( besselI(k,0) )+ k*cos(Phi2[,p]))
}else if ( sum(a[-1])!=0  ){
cmu=atan((b[1])^(-1)*(b[C]%*%t(sin(Phi2[,a]) )))
ckappa=sqrt( b[1]^2+ (  b[C]%*%t(sin(Phi2[,a]) ) )^2  )
cmu=apply(cmu, 1, circular)
llike=0
for (i  in 1:n) {
llike=llike+dvonmises(Phi2[i,p], cmu[i], ckappa[i], log=T)
}
L2=L2+llike
}
}
L2
#LR test#####
L=-2*(L2+828.9088)
L
sum(rapply(flagp, function(x) sum(x)))
#L2 ha 7 parametri
#Ls ha 7+38=45 parametri
p.value=(dchisq(-L, df=sum(rapply(flagp, function(x) sum(!x))), ncp = 0, log = FALSE))
round(p.value,5)
#AIC /BIC TEST
AIC_Ls=2*45-2*(Ls)
AIC_L2=2*sum(rapply(flagp, function(x) sum(x)))-2*(L2)
AIC_L2
#faccio il confronto
flagp=NULL
for (p in 1:9) {
flagp[[p]]=list(!c(0<= Stat[[p]][[1]] & Stat[[p]][[1]] <=-0) )
}
flagp[[3]][[1]][3]=F
flagp[[4]][[1]][2]=F
flagp[[5]][[1]][5]=F
flagp[[6]][[1]][2]=F
flagp[[7]][[1]][6]=F
flagp[[8]][[1]][3]=F
flagp[[9]][[1]][9]=F
L2=0
for (p in 1:9) {
b=array(Stime[[p]]$StimePar)
C=c(array(flagp[[p]]))[[1]]
a=c(c(array(flagp[[p]]))[[1]], rep(FALSE, 9-p))
if(sum(a[-1])==0){
k=b[1]
L2=L2+-50*log(2*pi)+ sum(-log( besselI(k,0) )+ k*cos(Phi2[,p]))
}else if ( sum(a[-1])!=0  ){
cmu=atan((b[1])^(-1)*(b[C]%*%t(sin(Phi2[,a]) )))
ckappa=sqrt( b[1]^2+ (  b[C]%*%t(sin(Phi2[,a]) ) )^2  )
cmu=apply(cmu, 1, circular)
llike=0
for (i  in 1:n) {
llike=llike+dvonmises(Phi2[i,p], cmu[i], ckappa[i], log=T)
}
L2=L2+llike
}
}
L2
#LR test#####
L=2*(L2+848.3081)
L
AIC_L2=2*sum(rapply(flagp, function(x) sum(!x)))-2*(L2)
AIC_L2
sum(rapply(flagp, function(x) sum(!x)))*log(50)-2*L2
